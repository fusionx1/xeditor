<?php

/**
 * @file
 * Provide for custom classes on field formatters in the display.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_formatter_editable_field_formatter_info_alter(array &$info) {
  // Add to all formatters.
  foreach ($info as &$formatter) {
    $formatter['settings']['contenteditable'] = array();
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_editable_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if (!empty($summary)) {
    $summary .= '<br />';
  }

  // Add a message to signify if field is editable or not.
  if (isset($settings['contenteditable']) && $settings['contenteditable'] === 'yes') {
    $summary .= t('Field is editable.');
  }
  else {
    $summary .= t('Field is not editable.');
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_formatter_editable_field_formatter_settings_form_alter(&$settings_form, $context) {
  $settings['contenteditable'] = FALSE;
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $value = filter_xss($settings['contenteditable'], array());

  $settings_form['contenteditable'] = array(
    '#type' => 'select',
    '#title' => t('Set this field as Editable'),
    '#description' => t('Setting this field as editable will make it possible in CKEditor to have inline editing.'),
    // Get the value if it's already been set.
    '#default_value' => ($settings['contenteditable'] === 'yes' ? $value : 'no'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
  );
}


/**
 * Implements hook_permission().
 */
function field_formatter_editable_permission() {
  return array(
    'access contenteditable' => array(
      'title' => t('Access inline edit'),
      'description' => t('Allow users to access inline edit.'),
    ),
  );
}


/**
 * Implements hook_preprocess_field().
 *
 * Adds a contenteditable attribute to the field's attributes_array
 * according to the field formatter settings.
 */
function field_formatter_editable_preprocess_field(&$variables, $hook) {
  $entity_type = $variables['element']['#entity_type'];
  $field_name  = $variables['element']['#field_name'];
  $bundle      = $variables['element']['#bundle'];
  $view_mode   = $variables['element']['#view_mode'];
  $nid         = $variables['element']['#object']->nid;

  if (user_is_logged_in() && user_access('access contenteditable')) {
    $contenteditable = array(
      'contenteditable' => 'true',
      'data-editor-field-id' => $nid,
      'data-edit-field-type' => filter_xss($field_name, array()),
    );

    // Get field formatter settings.
    $formatter_info = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);

    // Add attitribute for whole fields.
    if ($formatter_info['contenteditable'] === 'yes') {
      $variables += array('attributes_array' => array());
      $variables['attributes_array'] = drupal_array_merge_deep($variables['attributes_array'], $contenteditable);
    }
  }
}
